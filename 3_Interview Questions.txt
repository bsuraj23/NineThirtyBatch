

---

## ðŸ”¹ Data Types & Variables

1. Write a function to check if a string is a palindrome without using slicing.
2. Given a list of numbers, remove all duplicates **without using set()**.
3. Implement a function to merge two dictionaries.
4. Write code to find the frequency of each character in a string.
5. Implement your own version of `max()` without using the built-in function.

---

## ðŸ”¹ Lists, Strings & Collections

6. Reverse a list **in place** without using `[::-1]` or `reverse()`.
7. Write code to flatten a nested list (e.g. `[[1,2],[3,4]] â†’ [1,2,3,4]`).
8. Given a string, count the number of vowels and consonants.
9. Find the second largest number in a list.
10. Rotate a list by `k` elements (circular shift).

---

## ðŸ”¹ Control Flow & Loops

11. Print the Fibonacci sequence up to `n` terms.
12. Write a program to print a multiplication table for a number.
13. Write code to find all prime numbers up to `n`.
14. Implement a function to check if two strings are anagrams.
15. Find all numbers between 1 and 100 divisible by both 3 and 5.

---

## ðŸ”¹ Functions

16. Write a function that takes \*args and \*\*kwargs and prints them separately.
17. Implement a recursive function to calculate factorial.
18. Implement a recursive function to compute Fibonacci numbers.
19. Write a function that accepts a list and returns a new list with only unique elements.
20. Write a function that returns the sum of digits of a number.

---

## ðŸ”¹ OOP in Python

21. Create a class `BankAccount` with methods `deposit`, `withdraw`, and `check_balance`.
22. Implement inheritance with a base class `Shape` and derived classes `Circle` and `Rectangle` with an `area()` method.
23. Implement a class with a **static method** to check if a number is even.
24. Create a class `Car` that tracks the number of cars created using a **class variable**.
25. Override the `__str__` method in a class to display custom output.

---

## ðŸ”¹ Iterators & Generators

26. Create a custom iterator class that generates square numbers up to `n`.
27. Write a generator function that yields even numbers up to `n`.
28. Implement a generator that yields Fibonacci numbers.
29. Write a generator that reads a large file line by line.
30. Create a generator that yields prime numbers up to `n`.

---

## ðŸ”¹ Exception Handling

31. Write code to handle division by zero with try-except.
32. Create a custom exception `NegativeNumberError` and raise it when a negative number is passed.
33. Implement a function that retries division 3 times if an error occurs.
34. Write code that handles multiple exceptions (e.g., `ZeroDivisionError`, `ValueError`).
35. Implement a safe file reader that handles `FileNotFoundError`.

---

## ðŸ”¹ Decorators & Context Managers

36. Write a decorator that logs the execution time of a function.
37. Implement a decorator that counts how many times a function is called.
38. Write a decorator that only allows function execution if the user is "admin".
39. Create a context manager that opens a file and automatically closes it.
40. Write a context manager that temporarily changes the working directory.

---

## ðŸ”¹ Modules & Imports

41. Write a script with two modules, import one into the other, and call a function.
42. Implement a module with a helper function `is_palindrome()`, then import and test it.
43. Write code using `__name__ == "__main__"` to run tests only when executed directly.
44. Create a package with submodules and demonstrate relative imports.
45. Write a script that imports a standard library (like `math`) and uses at least 3 functions.

---

## ðŸ”¹ Namespaces & Scope

46. Write a function that demonstrates the **LEGB rule** with nested functions.
47. Implement a function that modifies a global variable using the `global` keyword.
48. Implement a function that modifies an enclosed variable using the `nonlocal` keyword.
49. Write a function with a variable that shadows a built-in function (e.g., `sum`) and fix it.
50. Demonstrate name collisions between global and local variables in a function.

---

## ðŸ”¹ Data Handling

51. Write code to read a text file and count the number of words.
52. Write a function that writes a list of numbers to a file (one per line).
53. Read a CSV file and print only the second column values.
54. Write code to serialize a dictionary into JSON and back.
55. Implement a script that accepts command-line arguments for addition and subtraction.

---

## ðŸ”¹ Functional Programming

56. Use `map()` to square all elements of a list.
57. Use `filter()` to extract only even numbers from a list.
58. Use `reduce()` to find the product of all numbers in a list.
59. Use a lambda function to sort a list of tuples by the second element.
60. Combine `map`, `filter`, and `reduce` to compute the sum of squares of even numbers.

